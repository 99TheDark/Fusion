use super::types::Type;

pub const SYMBOLS: &[Type] = &[
    Type::Whitespace,
    Type::NewLine,
    Type::Semicolon,
    Type::Assignment,
    Type::LeftParen,
    Type::RightParen,
    Type::LeftBrace,
    Type::RightBrace,
    Type::LeftBracket,
    Type::RightBracket,
    Type::Addition,
    Type::Subtraction,
    Type::Multiplication,
    Type::Division,
    Type::Exponentiation,
    Type::Modulo,
    Type::And,
    Type::Or,
    Type::Nand,
    Type::Nor,
    Type::Xand,
    Type::Xor,
    Type::Not,
    Type::Equal,
    Type::NotEqual,
    Type::GreaterThan,
    Type::LessThan,
    Type::GreaterThanOrEqual,
    Type::LessThanOrEqual,
    Type::LeftShift,
    Type::RightShift,
    Type::ZeroFillRightShift,
    Type::CountLeadingZeros,
    Type::CountTrailingZeros,
    Type::Colon,
    Type::Comma,
];

pub const KEYWORDS: &[Type] = &[
    Type::Module,
    Type::Boolean(true),
    Type::Boolean(false),
    Type::Let,
    Type::If,
    Type::For,
    Type::While,
    Type::Do,
    Type::Break,
    Type::Continue,
    Type::Return,
    Type::Function,
    Type::Class,
    Type::Public,
    Type::Private,
    Type::Inner,
    Type::Operator,
];

pub const ORDERED_BINARY_OPERATORS: &[&[Type]] = &[
    &[
        Type::Xand,
        Type::Xor,
        Type::Nand,
        Type::Nor,
        Type::And,
        Type::Or,
    ],
    &[
        Type::LessThanOrEqual,
        Type::GreaterThanOrEqual,
        Type::LessThan,
        Type::GreaterThan,
        Type::NotEqual,
        Type::Equal,
    ],
    &[Type::RightShift, Type::LeftShift, Type::ZeroFillRightShift],
    &[Type::Modulo],
    &[Type::Subtraction, Type::Addition],
    &[Type::Division, Type::Multiplication],
    &[Type::Exponentiation],
];

pub const ORDERED_UNARY_OPERATORS: &[Type] = &[
    Type::Not,
    Type::CountTrailingZeros,
    Type::CountLeadingZeros,
    Type::Subtraction,
];
